Async/Await - Async = makes a function return a promise
              Await = makes an async function wait for a promise

              Allows you to write asynchronous in a synchronous manner
              Async doesn't have resolve or reject parameters
              Everything after await is palced in an event queue

function walkDog(){

    return new Promise((resolve, reject) => {
        setTimeout(() => {

            const dogwalked = true;

            if(dogwalked){
                resolve("You walked the dog!");
            } else {
                reject("You DIDN'T walk the dog!);
            }
        }, 3000);
    });
}
function cleanKitchen(){

    return new Promise((resolve, reject) => {
        setTimeout(() => {

            const cleankitchen = true;

            if(cleankitchen){
                resolve("You cleaned the kitchen!");
            } else {
                reject("You DIDN'T clean the kitchen!);
            }
            
        }, 5000);
    });

}
function trashOut(){

    return new Promise((resolve, reject) => {
        setTimeout(() => {

            const tooktrash = true;

            if(tooktrash){
                resolve("You took the trash out!");
            } else {
                reject("You DIDN'T take out the trash!);
            }
        }, 1000);
    });

}

async function doChores(){

    try {
        const walkDogResult = await walkDog();
        const cleanKitchenResult = await cleanKitchen();
        const trashOutResult = await trashOut();
    }
    catch(error){
        console.error(error);
    }
}

doChores();

-- async and await are both found in a function, missing one will result to error