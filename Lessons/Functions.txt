FUNCTION = A section of resuable code.
           Declare code once, use it whenever you want.
           Call the function to execute that code.

function happyBirthday(username, age){      // username and age are parameters
    console.log("Happy birthday to you!");
    console.log("Happy birthday to you!");
    console.log("Happy birthday dear ${username}!");
    console.log("Happy birthday to you!");
    console.log("You are ${age} years old");
}

happyBirthday("Christopher", 25);       // Christopher and 25 are pass as arguments


function add(x, y){
    let result = x + y;
    return result;
}

let answer = add(2, 3);
console.log(answer);  // will return 5 

function isEven(number){
    result = number % 2;
    if(result === 0) {
        console.log(`${number} is Even`);
    } else {
        console.log(`${number} is Odd`);
    }
}

isEven(13);

function isEmailValid(email){
    let emailChecker = email.includes("@") && email.includes(".com") ? true : false ;

    console.log(emailChecker);

    getResult = isDomainValid(email);
    console.log(getResult);

    let result = emailChecker === true && getResult === true ? `Email is valid` : `Please use a gmail account`;
    console.log(result);
}

function isDomainValid(email){
    let domainChecker = email.includes("gmail") ? true : false ;
    return domainChecker; 
}

isEmailValid("validitycheck@gmail.com");

--------------------------------------------------------------------------

FUNCTION DECLARATION  = define a reusable block of code 
                        that performs a specific task

function hello(){
    console.log("Hello!");
}

--------------------------------------------------------------------------

FUNCTION EXPRESSIONS = a way to define functions as values or variables

1. Callbacks in asynchronous operations
2. Higher-Order functions
3. Closures
4. Event Listeners 


const hello = function(){
    console.log("Hello!");
}

setTimeout(callback, value-in-millisec);

setTimeout(function(){
    console.log("Hello!");
}, 3000);

// numbers
const numbers = [1, 2, 3, 4, 5, 6];

const squares = numbers.map(function(element){
    retur Math.pow(element, 2);
});

console.log(squares);

const cubes = numbers.map(function(element){
    retur Math.pow(element, 3);
});

console.log(cubes);

const evenNums = number.filter(function(element){
    return element % 2 === 0;
});

console.log(evenNums);

const oddNums = number.filter(function(element){
    return element % 2 !== 0;
});

console.log(oddNums);

--------------------------------------------------------------------------

ARROW FUNCTIONS = a concise way to write function expressions
                  good for a simple functions that you use only once
                  (parameters) => some code

const hello = (name, age) => {console.log(`Hello ${name}`)
                              console.log(`You are ${age} years old`)};

hello("Bro", 25);

setTimeout( () => console.log("Hello"), 3000);

const numbers = [1, 2, 3, 4, 5, 6];

const squares = numbers.map((element) => Math.pow(element, 2));
const cubes = numbers.map((element) => Math.pow(element, 3));
const evenNums = numbers.filter((element) => element % 2 === 0);
const oddNums = numbers.filter((element) => element % 2 !== 0);
const total = number.reduce((accumulator, element) => accumulator + element);

console.log(squares);
console.log(cubes);
console.log(evenNums);
console.log(oddNums);
console.log(total);

--------------------------------------------------------------------------

CLOSURES = A function defined inside of another function,
          the inner function has access to the variables
          and scope of the outer function.
          Allow for private variables and state maintenance
          Used frequently in JS Framework: React, Vue, Angular

function outer(){

    let message = "Hello";

    function inner(){
        console.log(message);
    }
    inner();
}

outer();

---------- Example Counter ----------

function createCounter(){

    let count = 0;

    function increment(){
        count++;
        console.log(`Count increased to ${count}`);
    }

    function getCount(){
        return count;
    }

    return {increment, getCount};
}

const counter = createCounter();

counter.increment();
console.log(`The current count is ${counter.getCount()}.`);

---------- Example Score Tracker ----------

function createGame(){

    let score = 0;

    function increaseScore(points){
        score += points;
        console.log(`+${points}pts`);
    }

    function decreaseScore(points){
        score -= points;
        console.log(`-${points}pts`);
    }

    function getScore(){
        return score;
    }

    return {increaseScore, decreaseScore, getScore};
}

const game = createGame();

game.increaseScore(5);
game.increaseScore(7);
game.decreaseScore(2);
console.log(`The final score is ${game.getScore()}pts`);