GETTERS = special method that makes a property readable
SETTERS = special method that makes a property writeable

validates and modify a value when reading/writing a property

class Rectangle{

    constructor(width, height){
        this.width = width;
        this.height = height;
    }

}

const rectangle = new Rectangle(-1000000, "pizza")

console.log(rectangle.width);
console.log(rectangle.height);

-- the rectangle object doesn't make anysense with it's width and height
-- we could use some validation when creating an object

class Rectangle{

    constructor(width, height){
        this.width = width;
        this.height = height;
    }

    set width(newWidth){
        if(newWidth > 0){
            this._width = newWidth
        } else {
            console.error("Width must be a positive number");
        }
    }

    set height(newHeight){
        if(newHeight > 0){
            this._height = newHeight
        } else {
            console.error("Height must be a positive number");
        }
    }

    get width(){
        return `${this._width.toFixed(1)} cm`;
    }

    get height(){
        return `${this._height.toFixed(1)} cm`;
    }

    get area(){
        return `${(this._width * this._height).toFixed(1)} cm`;
    }
}

const rectangle = new Rectangle(3, 4)

console.log(rectangle.width);
console.log(rectangle.height);
console.log(rectangle.area);

-- with the set width(newWidth) and set height(newHeight), the input will only take any number higher than zero.
-- using this._width instead of this.width, the underscore prefix tells the other developers that this is a private property of width and it shouldn't be touched.

-- with the get width() and get height(), the set values are now readable.
-- with getters, we can even use the property accessor to access a property that doesn't necessarily exist.

-- we can now access get area() as if it was a property, it was not found in our constructor
-- we can change the set values by:

rectangle.width = 5;
rectangle.heighgt = 6;


// for string example

class Person{

    constructor(firstName, lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    set firstName(newFirstName){
        if(typeof newFirstName === "string" && newFirstName.length > 0){
            this._firstName = newFirstName;
        } else {
            console.error("First name must be a non-empty string");
        }
    }

    set lastName(newLastName){
        if(typeof newLastName === "string" && newLastName.length > 0){
            this._lastName = newLastName;
        } else {
            console.error("Last name must be a non-empty string");
        }
    }

    set age(newAge){
        if(typeof newAge === "number" && newAge >= 0){
            this._age = newAge;
        } else {
            console.error("Age must be a non-negative number");
        }
    }

    get firstName(){
        return this._firstName;
    }

    get lastName(){
        return this._lastName;
    }

    get age(){
        return this._age;
    }
    
    get fullName(){
        return this._firstName + " " + this._lastName;
    }
}   

const person = new Person("Chr", "Esp", 27);

console.log(person.firstName);
console.log(person.lastName);
console.log(person.age);
console.log(person.fullName);